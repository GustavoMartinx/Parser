from automata.pda.npda import NPDA
from sys import argv, exit

if(len(argv) != 2):
    print("Please, insert a expression.")
    exit()


input_expression = argv[1]

npda = NPDA(

    states={'q0', 'q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', 'q8', 'q9', 'q10', 'q11', 'q12', 'q13', 'q14', 'q15', 'q16', 'q17', 'q18', 'q19', 'q20', 'q21', 'q22', 'q23', 'q24', 'qAceita'}, # estados do autômato

    input_symbols={'i', 'd', 'n', 'u', 'm', '+', '-', '/', '*', '(', ')', '$', '='}, # alfabeto de entrada

    stack_symbols={ # alfabeto da pilha
        'E', 'F', 'S', 'T', 'V', 
        'i', 'd',
        'n', 'u', 'm', 
        '+', '-', '*', '/',
        '=', '(', ')', '0'
    },

    transitions={

        # 'estado': {
        #   'entrada': {
        #      'le_a_da_pilha': {('estado_to_go', ('top_stack', 'override_a_in_stack'))}
        #   }
        # }

        # é Shift? Consome (terminal de) entrada
        # Não empilhar estado
        # Empilhar:
        #   Terminais (entrada)
        #   Variaveis (go to)


        'q0': {
                   
            'i':{
                '0': {('q7', ('i', '0'))}, # recebe 'i' na entrda, escreve 'i' na pilha e vai para q7
            },

            'n': {
                '0': {('q8', ('n', '0'))}
            },

            '(': {
                '0': {('q1', ('(', '0'))}
            },

            '': {
                'E': {('q2', 'E')},
                'F': {('q3', 'F')},
                'S': {('q4', 'S')},
                'T': {('q5', 'T')},
                'V': {('q6', 'V')},
            },
        },

        'q1': {

            'i': {
                '(': {('q7', ('i', '('))}
            },

            'n': {
                '(': {('q8', ('n', '('))},
            },

            '(': {
                '(': {('q1', ('(', '('))},
            },

            '': {
                'E': {('q9', 'E')},
                'F': {('q3', 'F')},
                'T': {('q5', 'T')},
                'V': {('q10', 'V')},
            },
        },

        'q2': {
            
            '': {
                'E': {('q4', 'S')}
            },

            '+': {
                'E': {('q11', ('+', 'E'))},
            },
            
            '-': {
                'E': {('q12', ('-', 'E'))},
            },
        },
                                                             
        'q3': {                                              

            '': {
                'F': {('q5', 'T'),
                      ('q19', 'T'),
                      ('q20', 'T')}
            },
        },

        'q4': {
            
            '': {
                'S': {('q4', '')}
            },

            '$': {
                '0': {('qAceita', '')}
            }
        },

        'q5': {

            '': {
                'T': {('q2', 'E'),
                      ('q9', 'E'),
                      ('q23', 'E')}
            },

            '/': {
                'T': {('q14', ('/', 'T'))}
            },

            '*': {
                'T': {('q13', ('*', 'T'))},
            },
        },

        'q6': {

            '': {
                'V': {('q3', 'F')}
            },

            '=': {
                'V': {('q15', ('=', 'V'))},
            },
        },

        'q7': {

            'd': {
                'i': {('q16', ('d', 'i'))}
            }
        },

        'q8': {

            'u': {
                'n': {('q17', ('u', 'n'))}
            },
        },

        'q9': {

            '+': {
                'E': {('q11', ('+', 'E'))},
            },
            
            '-': {
                'E': {('q12', ('-', 'E'))},
            },
            
            ')': {
                'E': {('q18', (')', 'E'))},
            },
        },

        'q10': {
            '': {
                'V': {('q3', 'F'),
                      ('q21', 'F'),
                      ('q22', 'F')},
            },
        },

        'q11': {
            
            '': {
                'F': {('q3', 'F')},
                'T': {('q19', 'T')},
                'V': {('q10', 'V')},
            },
        
            'i': {
                '+': {('q7', ('i', '+'))},
            },
        
            'n': {
                '+': {('q8', ('n', '+'))},
            },
            
            '(': {
                '+': {('q1', ('(', '+'))},
            },
        
        },

        'q12': {
            
            '': {
                'F': {('q3', 'F')},
                'T': {('q20', 'T')},
                'V': {('q10', 'V')},
            }, 

            'n': {
                '-': {('q8', ('n', '-'))},
            },

            'i': {
                '-': {('q7', ('i', '-'))},
            },
           
            '(': {
                '-': {('q1', ('(', '-'))},
            },
        },

        'q13': {

            '(': {
                '*': {('q1', ('(', '*'))},
            },

            'i': {
                '*': {('q7', ('i', '*'))},
            },

            'n': {
                '*': {('q8', ('n', '*'))},
            },

            '': {
                'F': {('q21', 'F')},
                'V': {('q10', 'V')},
            },
        },

        'q14': {

            'n': {
                '/': {('q8', ('n', '/'))}
            },

            'i': {
                '/': {('q7', ('i', '/'))},
            },

            '': {
                'F': {('q22', 'F')},
                'V': {('q10', 'V')},
            },

            '(': {
                '/': {('q1', ('(', '/'))},
            },
        },

        'q15': {

            '(': {
                '=': {('q1', ('(', '='))},
            },

            'i': {
                '=': {('q7', ('i', '='))},
            },
            
            'n': {
                '=': {('q8', ('n', '='))},
            },

            '': {
                'E': {('q23', 'E')},
                'F': {('q3', 'F')},
                'T': {('q5', 'T')},
                'V': {('q10', 'V')},
            },
        },

        'q16': {

            '': {
                'd': {('q16', '')},
                'i': {('q6', 'V')}
            }
        },

        'q17': {

            'm': {
                'u': {('q24', ('m', 'u'))}
            },
        },

        'q18': {
            '': {
                ')': {('q18', '')},
                'E': {('q18', '')},
                '(': {('q3', 'F'),
                      ('q21', 'F'),
                      ('q22', 'F')},
            },
        },

        'q19': {

            '': {
                'T': {('q19', '')},
                '+': {('q19', '')},
                'E': {('q9', 'E'),
                      ('q2', 'E'),
                      ('q23', 'E')},
            },
        },

        'q20': {

            '': {
                'T': {('q20', '')},
                '-': {('q20', '')},
                'E': {('q2', 'E'),
                      ('q23', 'E'),
                      ('q9', 'E')},
            },
        },

        'q21': {
                
            '': {
                'F': {('q21', '')},
                '*': {('q21', '')},
                'T': {('q19', 'T'),
                      ('q5', 'T'),
                      ('q20', 'T')},
            },
        },

        'q22': {

            '': {
                'F': {('q22', '')},
                '/': {('q22', '')},
                'T': {('q5', 'T'),
                      ('q19', 'T'),
                      ('q20', 'T')}
            },
        },

        'q23': {

            '+': {
                'E': {('q11', ('+', 'E'))},
            },

            '-': {
                'E': {('q12', ('-', 'E'))},
            },

            '': {
                'E': {('q23', '')},
                '=': {('q23', '')},
                'V': {('q4', 'S')},
            },
        },

        'q24': {

            '': {
                'm': {('q24', '')},
                'u': {('q24', '')},
                'n': {('q3', 'F'),
                      ('q21', 'F'),
                      ('q22', 'F')}
            },
        }
                
    },

    initial_state='q0',            # estado incial
    initial_stack_symbol='0',      # símbolo inicial da pilha
    final_states={'qAceita'},      # estado de aceitação
    acceptance_mode='final_state'  # o modo de aceitação é quando atingir o estado final 'qAceita'
)

if npda.accepts_input(input_expression + "$"):    # "$" caractere que indica o fim da expressão de entrada
    print(f"Expression {input_expression} : Accepted!")
else:
    print(f"Expression {input_expression} : Rejected!")
